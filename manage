#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host codenvy/che-ip)}
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-von}"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first.

  up - Starts all containers and docker-compose logs.
       Use ctrl-c to exit logging. Use "down" or "stop" to stop the run.
        Examples:
        $0 start
        $0 start <ip_proxy_1>,<ip_proxy_2>,<ip_proxy_3>,<ip_proxy_4> &
  start - Same as up

  start-web - Start the web server to monitor an existing ledger, requires GENESIS_URL and LEDGER_SEED params
        Example:
        $0 start-web GENESIS_URL=http://foo.bar/genesis.txt LEDGER_SEED=00000000000000000000000000000012

  logs - Display the logs from the docker compose run (ctrl-c to exit).

  cli - Start client container

  down - Brings down the services and removes the volumes (storage) and containers.
  rm - Same as down

  stop - Stops the services.  This is a non-destructive process.  The volumes and containers
         are not deleted so they will be reused the next time you run start.

  rebuild - Rebuild the docker images.
EOF
exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

initEnv() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift
    case "$arg" in
      *=*)
        export "${arg}"
        ;;
      *)
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  IP=""
  IPS=""
  if [[ $1 == *","* ]]; then
    IPS="$1"
  else
    IP="$1"
  fi
  export IP="$IP" IPS="$IPS"

  export LOG_LEVEL=${LOG_LEVEL:-info}
  export RUST_LOG=${RUST_LOG:-warning}
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
  start|up)
      initEnv "$@"
      docker-compose up -d webserver node1 node2 node3 node4
      docker-compose logs -f
    ;;
  start-combined)
      initEnv "$@"
      docker-compose up -d webserver nodes
      docker-compose logs -f
    ;;
  start-web)
      initEnv "$@"
      if [ -z "$LEDGER_SEED" ]; then
        export ANONYMOUS=1
      fi
      docker-compose up -d webserver
      docker-compose logs -f webserver
    ;;
  cli)
      initEnv "$@"
      docker-compose run --rm client
    ;;
  logs)
      initEnv "$@"
      docker-compose logs -f
    ;;
  stop)
      initEnv "$@"
      docker-compose stop
    ;;
  down|rm)
      initEnv "$@"
      docker-compose down -v
    ;;
  build)
      docker build -t von-network-base .
    ;;
  rebuild)
      docker build --no-cache -t von-network-base .
    ;;
  *)
      usage;;
esac

popd >/dev/null
